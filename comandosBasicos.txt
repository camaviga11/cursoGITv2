-------------------------------
[Comandos mas utilizados en GIT]
-------------------------------
INICIO
configurar email
git config --global user.email “<email>”
configurar nombre de usuario de la computadora
git config --global user.name “<nombre del usuario>”
configurar colores de git
git config --global color.ui true
git config --global core.editor <neovim,atom.  --wait>

WORKING DIRECTORY
inicializar un repositorio para trabajar con git
git init
git init <a>
a: nombre de la carpeta donde del proyecto que quiero crear e inicializar
Para ver el estado del repositorio
git status
git add <a>
a: nombre del archivo a pasar al stage

git add ./git add -A : guarda todos los archivos que esten listos para pasar al stage
git add -n <a>
a: mirar si el aechivo existe

STAGE
git restore --staged <a>
a: nombre del archivo que quiero borrar de stage
git rm --cached <a>
a: nombre del archivo que quiero borrar del stage
git rm -f <a>
a: nombre del archivo que quiero borrar definitivamente
pasar del stage al repositorio local
git commit -m "<mensaje del commit>"
corregir el commit anterior
git commit --amend
git commit --amend -m "<nuevo mensaje>"
ver la linea de commits
git log
ver la linea de commits resumidos
git log --oneline
ver el grafico de la linea de los commits
git log --oneline --graph/git log --oneline --graph --all
ver un numero determinado de comits
git log -<2>

TAGS ETIQUETAS
ligeras
git tag <a>
a: la version en numeros del proyecto
anotadas
git tag -a <0.5> -m "<a>"
a: mensaje del etiquetado EJ: Punto de partida del proyecto
git tag <a><SHA-1>
a: version ej. 1.0.1
git tag <0.0> <0907438f08d7ae3fdd87ede12f18837bcc1afa9d>
git tag <a><SHA-1> -m <b>
a:version ej. 1.0.1
b:mensaje del tag
git tag <0.0> <0907438f08d7ae3fdd87ede12f18837bcc1afa9d> -m "<Punto de partida del proyecto>"
lista los tags
git tag -l
borrar un tag
git tag -d <a>
a:version del tag que quiero borrar
renombrar un tag
git tag -f -a 0.5 -m "hasta el comando commit" 84fb8bdbce746c5a497714b68ae450fb9fdd54fb

DIFERENCIAS
ver las diferencias de la ubicacion actual con el HASH especificado
git diff <SHA1>
comparar especificando los dos puntos, se pueden ivertir el orden de comparacion
git diff <SHA1><SHA1>
RESET SUAVE SOFT
resetear los cambios y dejarlos en el stage
git reset --soft <a>
a: SHA1,a partir de este punto se van a borrar los comits este SAH1 queda como head
pasar del repositorio local al area de trabajo sin pasar por el stage
git reset --mixed <a>
a: SHA1 a partir de este punto se borran los cambios y todo queda en el area de trabajo

RESET DURO PELIGROSO HARD
git reset --hard esto borra definitivamente los archivos que esten en la jurisdiccion e GIT

git reset --hard <a>
a: SHA1 se va hasta ese punto y borra todo lo demas definitivamente , es mejor antes de utilizarlo listar los SAH1 de los comits antes de ejecutarlo y no cerrarla hasta estar seguros.

RAMAS
crear una rama
git branch <a>
a: nombre de la rama que quiero crear
listar las ramas
git branch -l
borrar rama
git branch -d <a>
a: nombre de la rama a borrar
forzar el borrado de una rama
git branch -D <a>
a: nombre de la rama  borrar
renombrar rama
git branch -m <a><b>
a:nombre de la rama que quiero renombrar
b:nuevo nombre de la rama
cambiar entre ramas
git checkout <a>
a:nombre de la rama a la que quiero ir
git checkout -b <a>
a: nombre de la nueva rama a crear y a la que se mueve al mismo tiempo
-----------------------------------------
RAMAS
para mezclar ramas me ubico en la rama donde quiero que se obtengan los cambios
git merge <a>
a: nombre de la rama que quiero mezclar con la actual

<<[CONCEPTOS BASICOS]>>

TIPOS DE SISTEMAS DE CONTROL DE VERSIONES
Local: Esta solo en el computador donde estamos, si el PC se daña se puede perder todo.
Centralizado: Los cambios se guardan en un servidor, el servidor reparte copias a cada usuario, el problema es que si se daña el servidor se pierde todo igual.
Distribuidos:  Cada uno de los usuarios tiene una copia de todo el proyecto, si alguien lo daña puede pedir una copia a los demas, son espejos del proyecto

<<[======================================]>>
    <<[==============================]>>
        <<[======================]>>
            <<[==============]>>
                 <<[======]>>
                    <<[]>>

<<[COMANDOS MAS USADOS EN GIT VERSION PASADA ]>>

# Para empezara trabajar en el repositosio en el cual estamos ubicados.
git init

#Crea una carpeta e inicia Git en esa carpeta
git init <Nombre de la carpeta>

# ver el estado de los archivos en git
git status

#Pasar del working directory al staging area
git add <nombre del archivo> # Agrega solo el arcchivo que especificamos
git add . # Sube todos los archivos que esten pendientes por seguir
git add -A # Sube todos los archivos que esten pendientes por seguir

# Borrar archivos
git restore --staged <nombre del archivo> borra los arcchivos del staging area
git rm -f <nombre del archivo> borra los archivos del computador


git config --global user.name "Nombre del usuario" # Para ingresar el nombre de usuario que va a trabajar en un equipo
git config --global user.email "correo electronico" # Para poner el correo electronico de ese usuario

# Editar un commit
git commit --amend -m "mensaje" # editar un commit anterior y su mensaje

git commit -m "first commit" # parar de agregar del area temporal a repositorio local
git remote add origin https://github.com/camaviga11/cursoGit.git # Enlazar con el repositorio de GitHub
git push -u origin master #Subir los archivos al repositorio, esto se hace uno vez

#Crear etiquetas tags versiones de un programa
git tag -a <version1.0> -m "mensaje"
git tag <nombre del tag> <numero identificador del commit>

#ver la lista de tags
git tag -l

#eliminar un tag
git tag -d <nombre del tag>

#renombrar un tag
git tag -f -a <Nombre de la version> -m "mensaje" <identidficador del commit 3404cf2>

#Ver el listado de commits y los identificadores
git log

#Ver la lista de identificadores mas resumida
git log --oneline

#Ver la lista de identificadores mas resumida y graficos
git log --oneline --graph

#ver el numero de commits que quiero ver con log
git log -<numero de commits que quiero ver>
git log --oneline -<numero de commits que quiero ver>

#ver diferencias entre el el ultimo commit y el estado actual den steging area
git diff <identificador del commit>

#Ver diferencias entre commits
git diff <identificador de comits> <Identificador del commit>

# Quita el archivo especificado del staging area
git reset <nombre del archivo>

# Resetear un commit a partir del identificador que especifiquemos, no elimina los arcchivos los deja en el staging area
git reset --soft <identificador de comits>

# Restaura el commit a partir del identificador que especifiquemos, no elimina los arcchivos los deja en el working directory
git reset --mixed <identificador de commid>

# Borra los archivos del computador, se mueve en el tiempo si tienes las lista de los HASH
git reset --hard

# Configurar otro editor
git config --global core.editor "atom --wait"

 -------
| Ramas |
 -------

# Crea una rama
git branch <Nombre de la rama>

# Listar las ramas
git branch -l

#eliminar rama
git branch -d <nombre de la rama>

#Forzar borrado de rama
git branch -D <nombre de la rama>

# Renombrar rama
git branch -m <Nombre de la rama> <Nombre de la rama>

# moverse entre ramas
git checkout <Nombre de la rama>

# Moverse entre identificadores de commits
git checkout <identificador del commit>

# Crear la rama y moverse en ella
git checkout -b <Nombre de la rama>

YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
|||||||||||||||||||||||||||||||||

# Forzar el paso de una rama a otra, esto puede hacer borrar archivos
git checkout -b <Nombre de la rama>

 +++++++++++++++++++++
| Trabajo entre ramas |
 ---------------------

# Mezclar ramas, debe estar para en la rama con el que quiero que se fusione, osea la rama que va a quedar
git merge <nombre rama que quiero fusionar con la rama master, la rama que va a desaparecer>

# Evitar bifurcaciones en la linea de diseño
git rebase <Nombre de la rama que voy a fusionar>

# Evitar bifurcaciones en la linea de diseño interactivamente
git rebase -i <Nombre de la rama que voy a fusionar>

#guardar cambios temporales para no tener que hacer commits si voy a trabajar en otra rama
git stash

#mostrar la lista de stash
git stash list

# eliminar stash
git stash drop stash@{?}

# Aplicar cambios al ultimo stash que cree
git stash apply

# Aplicar cambios en un stash
git stash apply stash@{?}

# Sacar un  cambio de una rama y moverla a otra
git cherry-pick <Identificador del commit que quiero traer a la rama actual>

 ......
|gitHub|
 ......

#enlazar el repositorio con gitHub
git remote add <origin> <direccion del repositorio de giHhub>

#ver si el repositorio esta enlazado
git remote -v

#remover el enlace del repositorio
git remote remove <origin>

#camino 1
#Trear los cambios del repositorio remoto
git fetch <origin> <nombre de la rama "master">

#si aparece un error "refusing to merge unrelated histories"
git merge <ruta de la rama descargada>

#camino 2
#Trear los cambios del repositorio remoto
git pull origin master

#subir cambios al repositorio remoto
git push <origin> <a la rama que quiero subir el cambio "master">

#enviar los tags
git push <origin> <a la rama que quiero subir el cambio "master"> --tags
